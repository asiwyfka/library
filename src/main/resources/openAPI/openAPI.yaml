openapi: 3.0.3
info:
  title: Library
  description: Приложение книжной библиотеки
  version: 1.0.0
servers:
  - url: http://localhost:8080/library
    description: Dev server
paths:
  /books:
    get:
      tags:
        - Контроллер для управления книгами
      summary: Метод позволяет получить список всех книг
      operationId: getAllBooks
      responses:
        '200':
          description: Успешный ответ со списком книг
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Books'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Контроллер для управления книгами
      summary: Метод позволяет добавить новую книгу
      operationId: addBook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: Успешный ответ с добавленной книгой
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Некорректные данные для создания книги
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /books/{bookId}:
    get:
      tags:
        - Контроллер для управления книгами
      summary: Метод позволяет получить книгу по ID
      operationId: getBookById
      parameters:
        - name: bookId
          in: path
          description: ID книги
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Успешный ответ с книгой
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Книга с таким ID не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Контроллер для управления книгами
      summary: Метод позволяет обновить информацию о книге
      operationId: updateBook
      parameters:
        - name: bookId
          in: path
          description: ID книги
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: Успешный ответ с обновленной книгой
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Книга с таким ID не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Некорректные данные для обновления книги
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Контроллер для управления книгами
      summary: Метод позволяет удалить книгу по ID
      operationId: deleteBook
      parameters:
        - name: bookId
          in: path
          description: ID книги
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Книга успешно удалена
        '404':
          description: Книга с таким ID не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users:
    get:
      tags:
        - Контроллер для управления пользователями
      summary: Метод позволяет получить список всех пользователей
      operationId: getAllUsers
      responses:
        '200':
          description: Успешный ответ со списком пользователей
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Контроллер для управления пользователями
      summary: Метод позволяет добавить нового пользователя
      operationId: addUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Успешный ответ с добавленным пользователем
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Некорректные данные для создания пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{userId}:
    get:
      tags:
        - Контроллер для управления пользователями
      summary: Метод позволяет получить информацию о пользователе по ID
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: ID пользователя
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Успешный ответ с данными о пользователе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Пользователь с таким ID не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Контроллер для управления пользователями
      summary: Метод позволяет обновить информацию о пользователе
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: ID пользователя
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Успешный ответ с обновленным пользователем
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Пользователь с таким ID не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Некорректные данные для обновления пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Контроллер для управления пользователями
      summary: Метод позволяет удалить пользователя по ID
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: ID пользователя
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Пользователь успешно удален
        '404':
          description: Пользователь с таким ID не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /loans:
    get:
      tags:
        - Контроллер для управления займами
      summary: Получить список всех займов
      operationId: getAllLoans
      responses:
        '200':
          description: Успешный ответ со списком всех займов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Loans'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Контроллер для управления займами
      summary: Добавить новый заем
      operationId: addLoan
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Loan'
      responses:
        '200':
          description: Успешный ответ с добавленным займом
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Loan'
        '400':
          description: Некорректные данные для создания займа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /loans/{loanId}:
    get:
      tags:
        - Контроллер для управления займами
      summary: Получить заем по ID
      operationId: getLoanById
      parameters:
        - name: loanId
          in: path
          description: ID займа
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Успешный ответ с найденным займом
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Loan'
        '404':
          description: Займ с таким ID не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Контроллер для управления займами
      summary: Обновить статус возврата займа
      operationId: updateReturnStatus
      parameters:
        - name: loanId
          in: path
          description: ID займа
          required: true
          schema:
            type: integer
            format: int64
        - name: returned
          in: query
          description: Статус возврата займа
          required: true
          schema:
            type: boolean
      responses:
        '204':
          description: Статус возврата обновлен успешно
        '404':
          description: Займ с таким ID не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Некорректные данные для обновления статуса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Контроллер для управления займами
      summary: Удалить заем по ID
      operationId: deleteLoan
      parameters:
        - name: loanId
          in: path
          description: ID займа
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Займ удален успешно
        '404':
          description: Займ с таким ID не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /loans/user/{userId}:
    get:
      tags:
        - Контроллер для управления займами
      summary: Получить список займов по ID пользователя
      operationId: getLoansByUserId
      parameters:
        - name: userId
          in: path
          description: ID пользователя
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Успешный ответ со списком займов пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Loans'
        '404':
          description: Пользователь с таким ID не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /loans/not-returned:
    get:
      tags:
        - Контроллер для управления займами
      summary: Получить список незавершенных займов
      operationId: getNotReturnedLoans
      responses:
        '200':
          description: Успешный ответ со списком незавершенных займов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Loans'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    Books:
      type: array
      items:
        $ref: '#/components/schemas/Book'

    Users:
      type: array
      items:
        $ref: '#/components/schemas/User'

    Loans:
      type: array
      items:
        $ref: '#/components/schemas/Loan'

    Book:
      type: object
      required:
        - id
        - title
        - author
        - publishedYear
        - pageCount
        - available
        - addedAt
        - loans
      properties:
        id:
          type: integer
          format: int64
          description: Id книги
        title:
          type: string
          description: Название книги
        author:
          type: string
          description: Автор книги
        publishedYear:
          type: integer
          description: Год издания книги
        pageCount:
          type: integer
          description: Количество страниц в книге
        available:
          type: boolean
          description: Маркер занятости книги
        addedAt:
          type: string
          format: date-time
          description: Дата добавления книги в библиотеку
        loans:
          type: array
          description: Займы, связанные с книгой
          items:
            $ref: '#/components/schemas/Loan'

    Loan:
      type: object
      required:
        - id
        - user
        - book
        - loanDate
        - returned
      properties:
        id:
          type: integer
          format: int64
          description: Id записи о выдаче
        user:
          $ref: '#/components/schemas/User'
        book:
          $ref: '#/components/schemas/Book'
        loanDate:
          type: string
          format: date-time
          description: Дата выдачи книги
        returnDate:
          type: string
          format: date-time
          description: Дата возврата книги
        returned:
          type: boolean
          description: Маркер возврата книги

    User:
      type: object
      required:
        - id
        - firstName
        - lastName
        - birthDate
        - dateRegistration
        - role
        - loans
      properties:
        id:
          type: integer
          format: int64
          description: Id пользователя
        firstName:
          type: string
          description: Имя пользователя
          maxLength: 25
        lastName:
          type: string
          description: Фамилия пользователя
          maxLength: 25
        birthDate:
          type: string
          format: date
          description: Дата рождения пользователя
        dateRegistration:
          type: string
          format: date-time
          description: Дата регистрации пользователя
        role:
          type: string
          description: Роль пользователя
          enum:
            - READER
            - ADMIN
        loans:
          type: array
          description: Займы, связанные с пользователем
          items:
            $ref: '#/components/schemas/Loan'

    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
          description: HTTP статус ошибки
        error:
          type: string
          description: Краткое описание ошибки
        message:
          type: string
          description: Подробное сообщение об ошибке
        timestamp:
          type: string
          format: date-time
          description: Время возникновения ошибки
